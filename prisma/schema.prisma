generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    objective String
    persona   String
    platform  String
    updatedAt DateTime @updatedAt
    userId    String

    PostAnalysis PostAnalysis[]
    user         User           @relation(fields: [userId], references: [id])
}

model PostAnalysis {
    id          String       @id @default(cuid())
    label       String
    notation    Int
    postId      String
    suggestions Suggestion[]

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Suggestion {
    id             String @id @default(cuid())
    postAnalysisId String
    suggestion     String

    postAnalysis PostAnalysis @relation(fields: [postAnalysisId], references: [id], onDelete: Cascade)
}
